const UserModel = require('../Models/UserModel');
const jwt = require('jsonwebtoken');
const TokenBlacklist = require('../Models/BlacklistTokenModel');

const login = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await UserModel.findOne({ email });

        if (!user) {
            return res.status(400).json({ error: "Invalid credentials" });
        }

        const isMatch = await user.comparePassword(password);

        if (!isMatch) {
            return res.status(400).json({ error: "Invalid credentials" });
        }

        // Create JWT
        const token = jwt.sign(
            { id: user._id, name: user.name, email: user.email }, process.env.JWT_SECRET, { expiresIn: '30d' }
        );

        res.json({
            message: "Login successful",
            token,
            user: {
                _id: user._id,
                name: user.name,
                email: user.email,
                mobile: user.mobile,
                profilePicture: user.profilePicture
                    ? `data:${user.profilePicture.contentType};base64,${user.profilePicture.data.toString('base64')}`
                    : null,
            }
        });


    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};
const logout = async (req, res) => {
    try {
        // Token from request headers or cookies
        const token = req.headers.authorization?.split(' ')[1] || null;

        if (token) {
            // Add token to blacklist
            await TokenBlacklist.create({ token });

            res.json({ message: 'Logout successful' });
        } else {
            res.status(400).json({ error: 'No token provided' });
        }
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

module.exports = {
    login,
    logout
};
